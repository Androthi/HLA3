// lexRW
//
//	This module contains the code to scan for an HLA reserved word.
// For speed, this code uses a huge hash table indexed by the length
// of the identifier (originally 2..12 characters for standard HLA
// reserved words) and a special hash function that does a reasonable
// job of distributing the HLA reserved words *and* is very efficient
// to compute.

unit lexRW;

#includeonce( "stdlib.hhf" )
#includeonce( "hlacompiler.hhf" )

// CheckRW-
//
//	On entry, ESI points at an alphabetic character (HLA reserved words
// always begin with an alpha).  This function scans past all alphanumeric
// characters to find the end of the identifier started by the char at
// ESI.
//
//	Note: HLA reserved words must begin with an alpha and contain only
//	alphanumeric characters (no underscores!).  If the lexer encounters
//	an underscore, it finishes the processing of the ID but doesn't bother
//	looking it up in the reserved word table.
//
// Return Values:
//
//	EDI- Points at the first character of the reserved word or ID.
//	ESI- Points one character beyond the reserved word/ID.
//	EAX- Return token value.
//	EBX- Subtoken value, if reserved word.

//proc( "CheckRW" )
procedure CheckRW( src:dword in esi ); @noframe;
#include( "jmptbl.hla" );
static(4)

	LengthJmpTbl:dword[13] :=
	[
		&IsAnID, &IsAnID, &len2, &len3, &len4, &len5, &len6,
		&len7, &len8, &len9, &len10, &len11, &len12
	]; 

begin CheckRW;

	push( ecx );
	push( edx );
	push( esi );		// Save ptr to start of ID.
	mov( esi, ecx );	// Save for length computation. 

	// While we've got alphanumeric characters, scan the ID:

	xor( eax, eax );	// Clear so we can index into SpreadTable.
	xor( ebx, ebx );	// Compute the hash function here.
	mov( [esi], al );
	mov( SpreadTable[eax], al );
	ScanChars:
	
		// Hash function is:
		//
		//	hash := (hash rol 3) ^ SpreadTable[chr];
		//
		//	Note that "hash" is a 16-bit value.
	
		rol( 3, bx );
		add( 1, esi );					// Bump up to next char.
		xor( al, bl );

		// Quick check for EOF:

		cmp( esi, EOF );
		jae LexemeDone;
		mov( [esi], al );				// Get the next char.
		mov( SpreadTable[eax], al );	// Spread bits around.
		test( al, al );					// Is it a valid ID char?
		jnz ScanChars;
													

		// Okay, it's a valid ID that *may* be a reserved word.
		// One other quick check, the length must be in the range
		// 2..12 for it to be a legitimate reserved word.  Otherwise,
		// treat it as an ID.

	LexemeDone:
		mov( ebx, hashValue );	// Save hash value for other uses!
		xor( bh, bl );			// Special hash value for reserved word lookups

		neg( ecx );				// ecx = esi - ecx
		add( esi, ecx );
		cmp( ecx, 12 );
		ja IsAnID;
		
		// At this point we need to load up EAX, EBX, ECX, and possibly EDX
		// with the string (length is in the range 2..12) as per the
		// requirements of the code in the cmpcode.hla file.  First, however,
		// we need to compute the index into the rwJmpTbl which is calculated
		// as edi = cl*256+bl.

		xor( edi, edi );
		mov( cl, bh );	
		mov( bx, di );	

		// Okay, now jump to the code that loads the appropriate registers
		// based on the string's length:

		jmp( LengthJmpTbl[ ecx*4 ] );

		len2:
			mov( [esi-2], ax );
			or( $2020, ax );			// UC->lc conversion.
			jmp( rwJmpTbl[ edi*4 ] );

		len3:
			mov( [esi-3], ax );
			mov( [esi-1], bl );
			or( $2020, ax );			// UC->lc conversion.
			or( $20, bl );
			jmp( rwJmpTbl[ edi*4 ] );

		len4:
			mov( [esi-4], eax );
			or( $20202020, eax );
			jmp( rwJmpTbl[ edi*4 ] );

		len5:
			mov( [esi-5], eax );
			mov( [esi-1], bl );
			or( $20202020, eax );
			or( $20, bl );
			jmp( rwJmpTbl[ edi*4 ] );

		len6:
			mov( [esi-6], eax );
			mov( [esi-2], bx );
			or( $20202020, eax );
			or( $2020, bx );
			jmp( rwJmpTbl[ edi*4 ] );

		len7:
			mov( [esi-7], eax );
			mov( [esi-3], bx );
			mov( [esi-1], cl );
			or( $20202020, eax );
			or( $2020, bx );
			or( $20, cl );
			jmp( rwJmpTbl[ edi*4 ] );

		len8:
			mov( [esi-8], eax );
			mov( [esi-4], ebx );
			or( $20202020, eax );
			or( $20202020, ebx );
			jmp( rwJmpTbl[ edi*4 ] );

		len9:
			mov( [esi-9], eax );
			mov( [esi-5], ebx );
			mov( [esi-1], cl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20, cl );
			jmp( rwJmpTbl[ edi*4 ] );

		len10:
			mov( [esi-10], eax );
			mov( [esi-6], ebx );
			mov( [esi-2], cx );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $2020, cx );
			jmp( rwJmpTbl[ edi*4 ] );

		len11:
			mov( [esi-11], eax );
			mov( [esi-7], ebx );
			mov( [esi-3], cx );
			mov( [esi-1], dl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $2020, cx );
			or( $20, dl );
			jmp( rwJmpTbl[ edi*4 ] );

		len12:
			mov( [esi-12], eax );
			mov( [esi-8], ebx );
			mov( [esi-4], ecx );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			jmp( rwJmpTbl[ edi*4 ] );
		

		// The code that actually checks for specific reserved words
		// is generated by the rw.exe program and that code is in
		// the following include file.  The JMP instruction above
		// transfers control to a statement within this file.

		#include( "cmpcode.hla" );



	// If we get to this point, the string between EDI and ESI is an
	// identifier, not a reserved word.

	IsAnID:
	idNotRW:
		
		mov( ID_tc, ebx );

	rwDone:

	pop( edi ); 	// Retrieve ptr to start of string.
	pop( edx );
	pop( ecx );
	ret();

end CheckRW;




//  CheckFunc-
//
//	On entry, ESI points at an at sign character (HLA function IDs
// always begin with an alpha).  This function scans past all alphanumeric
// characters to find the end of the function ID started by the char at
// ESI.
//
//	Note: HLA function IDs must begin with an at sign and contain only
//	alphanumeric characters (no underscores!).
//
// Return Values:
//
//	EDI- Points at the first character of the function ID (the "@").
//	ESI- Points one character beyond the function ID.
//	EAX- Return token value.
//	EBX- Subtoken value, if reserved word.
//
//	Returns carry clear if it finds a legal function ID, returns
//	the carry set if it's an unknown or illegal function ID.
//
// Destroys:
//
//	EDX- wiped out by this code.

//proc( "CheckFunc" )
procedure CheckFunc( src:dword in esi ); @noframe;
static(4)

	LengthJmpTbl:dword[18] :=
	[
		&BadFuncID, 
		&BadFuncID,
		&FID1,
		&FID2,
		&FID3,
		&FID4,
		&FID5,
		&FID6,
		&FID7,
		&FID8,
		&FID9,
		&FID10,
		&FID11,
		&FID12,
		&FID13,
		&FID14,
		&FID15,
		&FID16
	]; 

begin CheckFunc;

	push( ecx );
	push( edx );
	push( esi );		// Save ptr to start of function ID.
	mov( esi, ecx );	// Save for length computation. 

	// While we've got alphanumeric characters, scan the ID:

	xor( eax, eax );	// Clear so we can use BT for set membership.
	xor( ebx, ebx );	// Compute the hash function here.
	mov( [esi], al );
	ScanChars:

		inc( esi );
		cmp( esi, EOF );
		ja LexemeDone;
		mov( [esi], al );


		// Okay, see if this character is a valid reserved word char:

		bt( eax, GoodRWID );
		jc ScanChars;
		cmp( al, '_' );		// Can't end a function ID with an underscore.
		je BadFuncID;

		// Okay, it's a valid ID that *may* be a function ID.
		// One other quick check, the length must be in the range
		// 1..16 for it to be a legitimate function ID.  Otherwise,
		// treat it as an error.  Note that string length includes
		// "@" at this point (so we really want string lengths 2..17).

	LexemeDone:
		neg( ecx );			// ecx = esi - ecx
		add( esi, ecx );
		cmp( ecx, 17 );		
		ja BadFuncID;


		// Okay, now jump to the code that loads the appropriate registers
		// based on the string's length:

		jmp( LengthJmpTbl[ ecx*4 ] );

		FID1:
			mov( [edi+1], al );
			or( $20, al );
			jmp cmpfuncs_1_0;

		FID2:
			mov( [edi+1], ah );
			mov( [edi+2], al );
			or( $2020, ax );
			jmp cmpfuncs_2_0;

		FID3:
			xor( eax, eax );
			mov( [edi+1], ah );
			shl( 8, eax );
			mov( [edi+2], ah );
			mov( [edi+3], al );
			or( $202020, eax );
			jmp cmpfuncs_3_0;

		FID4:
			mov( [edi+1], eax );
			bswap( eax );
			or( $20202020, eax );
			jmp cmpfuncs_4_0;

		FID5:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], bl );
			or( $20202020, eax );
			or( $20, bl );
			jmp cmpfuncs_5_0;

		FID6:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], bh );
			mov( [edi+6], bl );
			or( $20202020, eax );
			or( $2020, bx );
			jmp cmpfuncs_6_0;

		FID7:
			mov( [edi+1], eax );
			bswap( eax );
			xor( ebx, ebx );
			mov( [edi+5], bh );
			shl( 8, ebx );
			mov( [edi+6], bh );
			mov( [edi+7], bl );
			or( $20202020, eax );
			or( $202020, ebx );
			jmp cmpfuncs_7_0;

		FID8:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			or( $20202020, eax );
			or( $20202020, ebx );
			jmp cmpfuncs_8_0;

		FID9:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], cl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20, cl );
			jmp cmpfuncs_9_0;

		FID10:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ch );
			mov( [edi+10], cl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $2020, cx );
			jmp cmpfuncs_10_0;

		FID11:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			xor( ecx, ecx );
			mov( [edi+9], ch );
			shl( 8, ecx );
			mov( [edi+10], ch );
			mov( [edi+11], cl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $202020, ecx );
			jmp cmpfuncs_11_0;

		FID12:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			jmp cmpfuncs_12_0;

		FID13:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			mov( [edi+13], dl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $20, dl );
			jmp cmpfuncs_13_0;

		FID14:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			mov( [edi+13], dh );
			mov( [edi+14], dl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $2020, dx );
			jmp cmpfuncs_14_0;

		FID15:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			xor( edx, edx );
			mov( [edi+13], dh );
			shl( 8, edx );
			mov( [edi+14], dh );
			mov( [edi+15], dl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $202020, edx );
			jmp cmpfuncs_15_0;

		FID16:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			mov( [edi+13], edx );
			bswap( edx );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $20202020, edx );
			jmp cmpfuncs_16_0;


	BadFuncID:
		pop( edi );
		pop( edx );
		pop( ecx );
		stc();				// Return Error Status indicator
		ret();

	// Include the machine-generated code that recognizes function IDs.

	#includeonce( "cmpFuncs.hla" )

	funcsDone:
		pop( edi );
		pop( edx );
		pop( ecx );
		clc();
		ret();

end CheckFunc;


//  CheckCTL-
//
//	Identical to CheckFunc except this guy searches for compile-time
//  statement reserved words.
//
//	Note: HLA compile-time statements must begin with a '#' and contain only
//	alphanumeric characters (no underscores!).
//
// Return Values:
//
//	EDI- Points at the first character of the CTL ID (the "#").
//	ESI- Points one character beyond the CTL ID.
//	EAX- Return token value.
//	EBX- Subtoken value, if reserved word.
//
//	Returns carry clear if it finds a legal CTL ID, returns
//	the carry set if it's an unknown or illegal CTL ID.
//
// Destroys:
//
//	EDX- wiped out by this code.

//proc( "CheckCTL" )
procedure CheckCTL( src:dword in esi ); @noframe;
static(4)

	LengthJmpTbl:dword[17] :=
	[
		&BadCTLID, 
		&CID1,
		&CID2,
		&CID3,
		&CID4,
		&CID5,
		&CID6,
		&CID7,
		&CID8,
		&CID9,
		&CID10,
		&CID11,
		&CID12,
		&CID13,
		&CID14,
		&CID15,
		&CID16
	]; 

begin CheckCTL;

	push( ecx );
	push( edx );
	push( esi );		// Save ptr to start of function ID.
	mov( esi, ecx );	// Save for length computation. 

	// While we've got alphanumeric characters, scan the ID:

	xor( eax, eax );	// Clear so we can use BT for set membership.
	xor( ebx, ebx );	// Compute the hash function here.
	mov( [esi], al );
	ScanChars:

		inc( esi );
		cmp( esi, EOF );
		ja LexemeDone;
		mov( [esi], al );


		// Okay, see if this character is a valid reserved word char:

		bt( eax, GoodRWID );
		jc ScanChars;
		cmp( al, '_' );		// Can't end a function ID with an underscore.
		je BadCTLID;

		// Okay, it's a valid ID that *may* be a function ID.
		// One other quick check, the length must be in the range
		// 1..16 for it to be a legitimate function ID.  Otherwise,
		// treat it as an error.  Note that string length includes
		// "@" at this point (so we really want string lengths 2..17).

	LexemeDone:
		neg( ecx );			// ecx = esi - ecx
		add( esi, ecx );
		cmp( ecx, 17 );		
		ja BadCTLID;


		// Okay, now jump to the code that loads the appropriate registers
		// based on the string's length:

		jmp( LengthJmpTbl[ ecx*4 ] );

		CID1:
			mov( [edi+1], al );
			or( $20, al );
			jmp cmpCTLs_1_0;

		CID2:
			mov( [edi+1], ah );
			mov( [edi+2], al );
			or( $2020, ax );
			jmp cmpCTLs_2_0;

		CID3:
			xor( eax, eax );
			mov( [edi+1], ah );
			shl( 8, eax );
			mov( [edi+2], ah );
			mov( [edi+3], al );
			or( $202020, eax );
			jmp cmpCTLs_3_0;

		CID4:
			mov( [edi+1], eax );
			bswap( eax );
			or( $20202020, eax );
			jmp cmpCTLs_4_0;

		CID5:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], bl );
			or( $20202020, eax );
			or( $20, bl );
			jmp cmpCTLs_5_0;

		CID6:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], bh );
			mov( [edi+6], bl );
			or( $20202020, eax );
			or( $2020, bx );
			jmp cmpCTLs_6_0;

		CID7:
			mov( [edi+1], eax );
			bswap( eax );
			xor( ebx, ebx );
			mov( [edi+5], bh );
			shl( 8, ebx );
			mov( [edi+6], bh );
			mov( [edi+7], bl );
			or( $20202020, eax );
			or( $202020, ebx );
			jmp cmpCTLs_7_0;

		CID8:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			or( $20202020, eax );
			or( $20202020, ebx );
			jmp cmpCTLs_8_0;

		CID9:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], cl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20, cl );
			jmp cmpCTLs_9_0;

		CID10:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ch );
			mov( [edi+10], cl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $2020, cx );
			jmp cmpCTLs_10_0;

		CID11:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			xor( ecx, ecx );
			mov( [edi+9], ch );
			shl( 8, ecx );
			mov( [edi+10], ch );
			mov( [edi+11], cl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $202020, ecx );
			jmp cmpCTLs_11_0;

		CID12:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			jmp cmpCTLs_12_0;

		CID13:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			mov( [edi+13], dl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $20, dl );
			jmp cmpCTLs_13_0;

		CID14:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			mov( [edi+13], dh );
			mov( [edi+14], dl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $2020, dx );
			jmp cmpCTLs_14_0;

		CID15:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			xor( edx, edx );
			mov( [edi+13], dh );
			shl( 8, edx );
			mov( [edi+14], dh );
			mov( [edi+15], dl );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $202020, edx );
			jmp cmpCTLs_15_0;

		CID16:
			mov( [edi+1], eax );
			bswap( eax );
			mov( [edi+5], ebx );
			bswap( ebx );
			mov( [edi+9], ecx );
			bswap( ecx );
			mov( [edi+13], edx );
			bswap( edx );
			or( $20202020, eax );
			or( $20202020, ebx );
			or( $20202020, ecx );
			or( $20202020, edx );
			jmp cmpCTLs_16_0;


	BadCTLID:
		pop( edi );
		pop( edx );
		pop( ecx );
		stc();				// Return Error Status indicator
		ret();

	// Include the machine-generated code that recognizes function IDs.

	#includeonce( "cmpCTLs.hla" )

	CTLsDone:
		pop( edi );
		pop( edx );
		pop( ecx );
		clc();
		ret();

end CheckCTL;


end lexRW;
