// funcs.hla
//
// HLA v2.x reserved word scanner generator for compile-time reserved words.
//
// This program is almost identical to the funcs.hla program. It just designed
// to deal with compile-time statements beginning with "#" rather than
// reserved words beginning with "@". See funcs.hla for more comments.




program CTLsLexerGenerator;
#include( "stdlib.hhf" )
#include( "w.hhf" )
const
	// MaxLength is the maximum ID length this code supports.
	// Note that changing this to a larger value is *not* the
	// only change needed to support longer IDs.

	MaxLength	:= 16;

	// MaxNames is the maximum total number of IDs this program allows.
	// As this is being written, there are less than 200 function names.
	// Bump this number up if you decide to add more than 256.

	MaxNames	:= 256;

type
	NameStr_t	:string[ MaxNames ];
	NNptr_t		:pointer to NameNode_t;
	NameNode_t	:record

		left	:NNptr_t;
		right	:NNptr_t;
		fName	:string;
		lbl		:uns32;

	endrecord;
	
static

	// InStrs-	This array holds all the names read from the file, in
	//			the order they were read from the file.

	InStrs		:NameStr_t;

	
	// "indexes" is the number of strings of each length read from the file.

	indexes		:uns32[ MaxLength ];
	
	// fnames is an array of pointers.  The row index is the length
	// of the string.  Each row holds however many strings there are that
	// have the length specified by the row index.  Note that "indexes[i]"
	// holds the number of strings of length "i" in this two-dimensional array.

	fnames		:NameStr_t[ MaxLength ];

	// NameTrees-
	//
	//	This is an array of binary trees, one for each name length.
	// Each tree is a balanced binary search tree of identifiers.
	// All the identifiers in a single tree have the same length.

	NameTrees	:NNptr_t[ MaxLength ] := MaxLength dup [NULL];


	// "f" is the input file (ctls.txt) and cmpCTLs is the file variable
	// for the comparison code this program emits.

	f			:file;
	cmpCTLs		:file;
	ctlTokens	:file;


	// myTrim-
	//
	//	Version of str.trim that works with the string types
	// this code processes.  "Trims" all whitespace before
	// and after the specified string.

	procedure mytrim( s:string in eax ); @returns( "eax" );
	begin mytrim;

		push( ebx );
		push( ecx );
		mov( (type str.strRec [eax]).length, ebx );
		forever

			dec( ebx );
			breakif((type int32 ebx) < 0 );
			mov( [eax+ebx], ch );
			breakif( ch not in { ' ', stdio.tab } );

		endfor;
		inc( ebx );
		mov( ebx, (type str.strRec [eax]).length );
		pop( ecx );
		pop( ebx );

	end mytrim;


	// BinaryTraverse-
	//
	//	This iterator traverses an array of strings using a
	// binary partitioning algorithm.  On the first yield, it
	// returns the string in the middle of the array, partitioning
	// the array in two pieces.  Then this algorithm repeats on the
	// lower half, and finally on the upper half, in a recursive fashion.
	//
	//	Note: this iterator returns the string pointer in EAX
	//	and it also wipes out EBX on each iteration.

	iterator BinaryTraverse( var Names: NameStr_t; count:uns32 ); @nodisplay;
	begin BinaryTraverse;

		// Select the middle element of the array.
		// Fail if there are no more elements left in the array.
		// Middle := count div 2;

		mov( count, eax );
		if( eax <> 0 ) then

			shr( 1, eax );		// Makes value even.
			shl( 2, eax );
			add( Names, eax );
			mov( [eax], eax );
			yield();

			// Okay, recursively repeat this process for each string
			// in the array *before* the element we just yielded.

			mov( count, eax );	// Half as many elements in the lower
			shr( 1, eax );		//  half of the array that we pass.
			foreach BinaryTraverse( Names, eax ) do

				// Just yield whatever string the recursive called
				// yielded to us:

				yield();

			endfor;
			
			// Okay, now recursively repeat this process for each string
			// in the array *after* the middle element we originally
			// yielded above.
			//
			//	Note: if count was originally odd, then we need to
			// call BinaryTraverse with the same value we used above.
			// However, if count was originally even, then we need to
			// call BinaryTraverse with one less than the value we used
			// in the foreach loop above (otherwise we would send the
			// original median value again and wind up in an infinite loop).
			//
			//	First, compute the starting location in the array for
			// the new sub-array:

			mov( count, eax );
			shr( 1, eax );
			inc( eax );			// Skip original string
			mov( Names, ebx );
			lea( ebx, [ ebx + eax*4 ] );

			// Now compute the new count value:
			
			mov( count, eax );
			dec( eax );			// Subtract one if originally even.
			shr( 1, eax );

			// Now yield the strings in the upper half of the array:

			foreach BinaryTraverse( [ebx], eax ) do

				yield();

			endfor;

		endif;

	end BinaryTraverse;



	// Insert-
	//
	//	Inserts a node into a binary tree.

	procedure Insert( var tree: NNptr_t; fName:string; node:uns32 );
		@nodisplay;

		// LocateNode- Locates the pointer field (left or right) to
		// which we must attach the new node containing the fName string.
		//
		// This procedure returns the address of the .left or .right
		// field to which we must attach the new node in the EBX register.

		procedure LocateNode( var tree: NameNode_t; fName:string ); @nodisplay;
		begin LocateNode;

			mov( tree, ebx );
			if( str.gt( (type NameNode_t [ebx]).fName, fName )) then

				if( (type NameNode_t [ebx]).left <> NULL ) then

					LocateNode( (type NameNode_t [ebx]).left, fName );

				else

					lea( ebx, (type NameNode_t [ebx]).left );

				endif;

			else

				if( (type NameNode_t [ebx]).right <> NULL ) then

					LocateNode( (type NameNode_t [ebx]).right, fName );

				else

					lea( ebx, (type NameNode_t [ebx]).right );

				endif;

			endif;

		end LocateNode;

	begin Insert;

		push( eax );
		push( ebx );

		mov( tree, ebx );
		if( (type dword [ebx]) <> NULL ) then

			mov( [ebx], ebx );
			LocateNode( (type NameNode_t [ebx]), fName );

		endif;

		// At this point, EBX points at either the root node pointer
		// or at the .left or .right field to which we must attach the
		// new node.  Attach the new node here.


		// Create a new here.

		malloc( @size( NameNode_t ));	// Allocate storage for a node.
		mov( eax, [ebx] );				// Store address into the link pointer.

		// Fill in the fields of the new node.

		mov( eax, ebx );
		mov( fName, eax );
		mov( eax, (type NameNode_t [ebx]).fName );
		mov( node, eax );
		mov( eax, (type NameNode_t [ebx]).lbl );
		xor( eax, eax );
		mov( eax, (type NameNode_t [ebx]).left );
		mov( eax, (type NameNode_t [ebx]).right );

		pop( ebx );
		pop( eax );

	end Insert;


	procedure TreeTraverse( tree: NNptr_t; len:uns32 ); @nodisplay;

		procedure JmpLeftRight( var nn:NameNode_t; len:uns32 ); @nodisplay;
		begin JmpLeftRight;

			push( eax );
			push( ebx );
			push( ecx );

			mov( nn, ebx );
			mov( (type NameNode_t [ebx]).left, ecx );
			mov( (type NameNode_t [ebx]).right, eax );
			if( ecx = NULL && eax = NULL) then

				cmpCTLs.put( stdio.tab, "jne BadCTLID;" nl );

			else

				if( ecx = NULL ) then

					cmpCTLs.put( stdio.tab, "jb BadCTLID;" nl );

				else

					cmpCTLs.put
					( 
						stdio.tab,
						"jb cmpCTLs_", 
						len, 
						'_', 
						(type NameNode_t [ecx]).lbl, 
						";" nl
					);
					
				endif; 

				mov( nn, ebx );
				mov( (type NameNode_t [ebx]).right, eax );
				if( eax = NULL ) then

					cmpCTLs.put( stdio.tab, "ja BadCTLID;" nl );

				else

					cmpCTLs.put
					( 
						stdio.tab,
						"ja cmpCTLs_", 
						len, 
						'_', 
						(type NameNode_t [eax]).lbl, 
						";" nl
					);
					
				endif;

			endif;
			pop( ecx );
			pop( ebx );
			pop( eax ); 

		end JmpLeftRight;

	begin TreeTraverse;

		push( eax );
		push( ebx );
		mov( tree, ebx );
		inc( len ); 
		mov( len, eax );
		switch( eax )

			case( 1 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( al, '",
					(type NameNode_t [ebx]).fName,
					"' );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );
				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);

			case( 2 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( ax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, ",
					len,
					") );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );
				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);


			case( 3, 4 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, ",
					len,
					") );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );
				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 5 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( bl, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 1) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);


			case( 6 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( bx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 2) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 7 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 3) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 8 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 9 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( cl, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 1) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 10 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( cx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 2) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 11 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ecx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 3) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 12 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ecx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 13 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ecx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( dl, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 12, 1) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);






			case( 14 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ecx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( dx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 12, 2) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 15 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ecx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( edx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 12, 3) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);




			case( 16 )

				cmpCTLs.put
				( 
					"cmpCTLs_", 
					len, 
					'_', 
					(type NameNode_t [ebx]).lbl,
					":" nl,
					stdio.tab,
					"cmp( eax, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 0, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ebx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 4, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( ecx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 8, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				( 
					stdio.tab,
					"cmp( edx, funcstr( """,
					(type NameNode_t [ebx]).fName,
					""", 12, 4) );" nl
				);
				JmpLeftRight( (type NameNode_t [ebx]), len );

				cmpCTLs.put
				(
					stdio.tab,
					"mov( tkn_pound_",
					(type NameNode_t [ebx]).fName,
					", eax );" nl,
					stdio.tab,
					"mov( func_tc, ebx );" nl,
					stdio.tab,
					"jmp CTLsDone;" nl nl
				);


			default

				stdout.put
				( 
					"No code generation for strings of length ", 
					len, 
					nl 
				);

		endswitch;

		dec( len );
		if( (type NameNode_t [ebx]).left <> NULL ) then
		 
			TreeTraverse( (type NameNode_t [ebx]).left, len );

		endif;
		if( (type NameNode_t [ebx]).right <> NULL ) then
		 
			TreeTraverse( (type NameNode_t [ebx]).right, len );

		endif;
		pop( ebx );
		pop( eax );
		 
	end TreeTraverse;

begin CTLsLexerGenerator;


	f.create();
	f.open( "rw\ctls.txt", fileio.r );
	ctlTokens.create();
	ctlTokens.openNew( "ctlTokens.hhf" );

	ctlTokens.put
	(
		"// ctlTokens.hhf-" nl
		"//    This include file provides definitions for all the" nl
		"//    compile-time statement token constants."  nl
		"//" nl
		"// Note: This file is generated by machine.  Do not modify this" nl
		"//       file by hand.  If you want to add or change HLA reserved" nl
		"//       words, please see the documentation for the ""ctls""" nl
		"//       program that accompanies the HLA v2.x source listings." nl
		nl
		"const" nl
		nl	
	);

	// Quickly read all the input reserved words into the "s" array.
	// While we're at it, generate the enum constants for the rwTokens.hhf file.

	mov( 0, ebx );
	mov( ebx, edx );
	while( !f.eof() ) do

		assert( ebx < MaxNames );
		f.a_gets();
		mytrim( (type string eax ));


		// If the input line is not blank, then assume it has exactly one
		// word on the line.  Extract and save this item.

		if( (type str.strRec [eax]).length <> 0 ) then

			mov( eax, InStrs[ ebx*4 ] );		// Save function names here.
			inc( ebx );

			// Emit the token value to the token file:

			ctlTokens.put
			( 
				stdio.tab, 
				"tkn_pound_", 
				(type string eax):-16,
				":= tkn_endTknList + $",
				edx,
				";" nl
			);
			inc( edx );

		endif;

	endwhile;

	// Finish up the ctlTokens.hhf file:

	ctlTokens.put
	( 
		stdio.tab, 
		"tkn_endCtlTknList        := tkn_endTknList + $", 
		edx, 
		";" nl nl
		"// End of ctlTokens.hhf include file." nl
	);
	ctlTokens.close(); 


	// Initialize an array holding the number of strings for each function
	// name length:

	cld();
	lea( edi, indexes );
	mov( MaxLength, ecx );
	mov( 0, eax );
	rep.stosd();

	// Okay, separate the strings by length and place them in the "fnames" 
	// array. Each row of fnames contains all the strings read from funcs.txt 
	// of that particular length (i.e., the row index).

	mov( 0, ecx );
	for( mov( 0, ecx ); ecx < ebx; inc( ecx )) do

		mov( InStrs[ ecx*4 ], edx );
		mov( (type str.strRec [edx]).length, eax );
		assert( eax in 1..MaxLength );

		// We'll assume that there are no zero length strings.
		//
		//	Use 0..15 as the index for lengths 1..16:

		dec( eax );

		// "indexes" is counting the number of strings with the length
		// specified by the index into "indexes".  Bump the corresponding
		// index up by one.

		mov( indexes[ eax*4 ], esi );	// Save index for this word in ESI.
		inc( indexes[ eax*4 ] );		// Bump up to the next ID.
		intmul( MaxNames, eax );
		add( eax, esi );
		mov( edx, fnames[ esi*4 ] );	// Save a pointer to the string.

	endfor;

	// EBX = Length of string we're currently processing.

	
	for( mov( 0, ebx ); ebx<MaxLength; inc( ebx ) ) do

		// Get the number of strings whose length is "EBX" and save in
		// EDX for later use:

		mov( indexes[ ebx*4 ], edx );
		inc( ebx );
		stdout.put
		( 
			"Length: ", 
			(type uns32 ebx), 
			" count: ", 
			(type uns32 edx), 
			nl
		);
		dec( ebx );
		
	endfor;


	// Okay, now generate the code to recognize all these reserved words.

	cmpCTLs.create();
	cmpCTLs.openNew( "cmpCTLs.hla" );

	cmpCTLs.put
	(
		"// cmpCTLs.hla (include file to scan HLA v2.x function names)" nl
		nl
		"// Note: The following code is emitted by machine. " nl
		"//       Do not modify this code by hand.  Instead, see the" nl
		"//       documentation for the ""func"" (function names) program" nl
		"//       that accompanies the HLA v2.x source code to determine" nl
		"//       how to add new function names to the HLA language." nl
		nl
	);

	
	// Repeat the following loop once for each function name length:

	for( mov( 0, ecx ); ecx < MaxLength; inc( ecx )) do

		intmul( MaxNames*4, ecx, eax );
		lea( eax, fnames[ eax ] );

		mov( 0, edx );
		foreach BinaryTraverse( [eax], indexes[ecx*4] ) do

			stdout.put( "name: ", (type string eax), nl );
			Insert( NameTrees[ ecx*4 ], (type string eax), edx );
			inc( edx );

		endfor;

		// Okay, call the tree traversal code to emit the cmp sequence
		// for each item in the tree.

		if( NameTrees[ ecx*4 ] <> NULL ) then

			TreeTraverse( NameTrees[ ecx*4 ], ecx );

		else

			inc( ecx );
			cmpCTLs.put
			( 
				"cmpCTLs_", 
				(type uns32 ecx), 
				"_0:" 
				 nl,
				 stdio.tab, 
				 "jmp BadCTLID;" 
				 nl 
			);
			dec( ecx );

		endif;

	endfor;


	cmpCTLs.put
	(
		nl
		nl
		"// End of HLA compile-time statement name scanner include file."
		nl
	);
	cmpCTLs.close();

end CTLsLexerGenerator;
